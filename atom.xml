<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TanDelai</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-16T12:55:57.419Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>TanDelai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/12/SoftwareTest/"/>
    <id>http://example.com/2021/08/12/SoftwareTest/</id>
    <published>2021-08-11T18:08:54.064Z</published>
    <updated>2021-08-16T12:55:57.419Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">layout: pages</span><br><span class="line">title: 软件测试 | 第一篇 基础概念 </span><br><span class="line">date: 2021-08-12 02:11:14</span><br><span class="line">tags:</span><br><span class="line">- SoftwareTest</span><br><span class="line">categories:</span><br><span class="line">- 软件编程</span><br></pre></td></tr></table></figure><h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h3 id="1、软件"><a href="#1、软件" class="headerlink" title="1、软件"></a>1、软件</h3><ul><li><strong>定义：</strong>软件是相对硬件而言的，一系列按照特定顺序组织的计算机数据和指令的集合。</li><li><strong>分类：</strong><ul><li><strong>层级：</strong>系统软件（Windows、macOS、Linux、HarmonyOS、Android、iOS.etc）、应用软件（Client、APP、Plug-in）；</li><li><strong>组织：</strong>商业软件、开源软件；</li><li><strong>结构：</strong>单机软件、分布式软件；  </li></ul></li></ul><h3 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h3><ul><li><p><strong>流程：</strong></p><img src="/2021/08/12/SoftwareTest/Download\Typora\image-20210812120156688.png" alt="image-20210812120156688" style="zoom:80%;"></li><li><p><strong>问题定义：</strong>软件提供方与需求方共同讨论，确定开发目标和可行性；</p></li><li><p><strong>需求分析：</strong>划分软件需求的功能模块，编制成【需求文档】；</p></li><li><p><strong>软件设计：</strong>对软件进行系统设计，如系统框架设计、数据库设计，编制【产品说明书】；</p></li><li><p><strong>软件开发：</strong>制定统一、标准的程序编写规范，选择一种编程语言进行开发；</p></li><li><p><strong>软件测试：</strong>查找软件设计与开发过程中存在的缺陷并加以修正；</p></li><li><p><strong>软件运维：</strong>包括纠错性维护、改进性维护，持续时间最长。</p></li></ul><h3 id="3、开发模型"><a href="#3、开发模型" class="headerlink" title="3、开发模型"></a>3、开发模型</h3><ul><li><p><strong>分类：</strong></p><p><img src="/2021/08/12/SoftwareTest/Download\Typora\软件开发模型-16287447456101.png" alt="软件开发模型"></p></li></ul><h3 id="4、缺陷"><a href="#4、缺陷" class="headerlink" title="4、缺陷"></a>4、缺陷</h3><ul><li><p><strong>定义：</strong>所有不满足或超出需求的部分都是缺陷（IEEE729-1983）。</p></li><li><p><strong>分类：</strong></p><ul><li><strong>内容：</strong>未实现产品说明书要求或虽未提及但应该实现的功能；实现了产品说明书中指明不应出现的或未做要求的功能；难以理解、不易使用的功能（用户角度），形成【缺陷报告】。</li><li><strong>测试：</strong>界面、功能、性能、安全性、兼容性。</li><li><strong>代码：</strong>bug、defect、error。</li></ul></li><li><p><strong>原因：</strong></p><ul><li>需求不明确；软件结构复杂；编码问题；项目周期太短；使用新技术。</li></ul></li><li><p><strong>处理流程：</strong></p><img src="/2021/08/12/SoftwareTest/Download\Typora\image-20210812123558249.png" alt="image-20210812123558249" style="zoom:80%;"></li><li><p><strong>管理工具：</strong></p><ul><li>Bugzilla；</li><li>禅道；</li><li>Jira。</li></ul></li></ul><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><ul><li><p><strong>定义：</strong>为了检验软件是否满足需求或理清预期与实际之间的差异而用手工或自动手段运行或测定某个系统的过程。</p></li><li><p><strong>分类：</strong></p><ul><li><strong>测试阶段：</strong>单元测试、冒烟测试、集成测试、系统测试、验收测试；</li><li><strong>测试技术：</strong>黑盒测试、白盒测试、灰盒测试；</li><li><strong>质量特性：</strong>功能测试、性能测试（负载测试、压力测试.etc）；</li><li><strong>自动化程度：</strong>手工测试、自动化测试；</li><li><strong>测试类型：</strong>文档测试、界面测试、功能测试、性能测试、安全性测试、兼容性测试；</li><li><strong>版本周期：</strong>Preview测试（预览版）、Alpha测试（内测版）、Beta测试（公测版）、Release测试(候选版)；</li><li><strong>其他：</strong>静态测试、动态测试、随机测试、回归测试、探索性测试。</li></ul><p><img src="/2021/08/12/SoftwareTest/Download\Typora\软件测试分类.png" alt="软件测试分类"></p></li><li><p><strong>测试和调试</strong></p><table><thead><tr><th></th><th>测试</th><th>调试</th></tr></thead><tbody><tr><td><strong>主体</strong></td><td>测试</td><td>开发</td></tr><tr><td><strong>方向</strong></td><td>自底向上</td><td>自顶向下</td></tr><tr><td><strong>目标</strong></td><td>找bug</td><td>将错误修改正确</td></tr><tr><td><strong>方法</strong></td><td>等价类、边界值.etc</td><td>程序和逻辑算法</td></tr><tr><td><strong>思路</strong></td><td>反向思维、破坏性</td><td>正向思维</td></tr></tbody></table></li></ul><h2 id="6、测试模型"><a href="#6、测试模型" class="headerlink" title="6、测试模型"></a>6、测试模型</h2><h3 id="4、自动化测试"><a href="#4、自动化测试" class="headerlink" title="4、自动化测试"></a>4、自动化测试</h3><ul><li><p><strong>技术</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 广度：JUnit接口测试、Web/APP/Client的UI测试、性能测试、用户体验测试、AI算法测试、LoT、压力测试、专项测试（兼容性、安全、多媒体、网络）...- 深度：Monkey、Appium、AirTest、Applitools。自动化测试远远不只是在一个已有的工具上开发自己的脚本，达到所谓的一个通过率或覆盖率，更核心是思考如何在软件生命周期各个阶段提升产品研发效能及稳定性甚至用户体验。    </span><br></pre></td></tr></table></figure></li><li><p><strong>定位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 瀑布模型：    - DevOps模型：    </span><br></pre></td></tr></table></figure></li></ul><p>软件质量</p><h2 id="二、生命周期和开发模型"><a href="#二、生命周期和开发模型" class="headerlink" title="二、生命周期和开发模型"></a>二、生命周期和开发模型</h2><h3 id="1、软件危机和软件工程"><a href="#1、软件危机和软件工程" class="headerlink" title="1、软件危机和软件工程"></a>1、软件危机和软件工程</h3><ul><li><p><strong>软件危机</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 定义：软件生产方式无法满足迅速增长的需求从而导致软件开发维护过程中出现一系列严重问题的现象。</span><br></pre></td></tr></table></figure></li><li><p><strong>软件工程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 定义：基于软件危机，北约组织计算机科学家提出了软件工程，从此软件生产进入了工程化时代。- 软件开发技术：软件开发方法学、软件工具、软件工程环境。- 软件项目管理：软件质量、项目估算、进度控制、人员组织、配置管理、项目计划。- 引起软件危机的主要问题是软件质量问题。软件工程主要解决的就是软件质量问题。软件测试是软件质量管理体系中一个重要的手段。</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、软件生命周期"><a href="#2、软件生命周期" class="headerlink" title="2、软件生命周期"></a>2、软件生命周期</h3><h3 id="3、软件开发模型"><a href="#3、软件开发模型" class="headerlink" title="3、软件开发模型"></a>3、软件开发模型</h3><table><thead><tr><th>需求分析</th><th>概要设计</th><th>详细设计</th><th>编码</th><th>测试</th><th>验收</th></tr></thead><tbody><tr><td>需求说明书</td><td>架构文档</td><td>详设文档</td><td>源代码</td><td>测试报告</td><td>产品</td></tr></tbody></table><ul><li><p><strong>瀑布模型</strong></p><table><thead><tr><th>计划（定义）</th><th>需求分析</th><th>设计</th><th>编码</th><th>测试</th><th>运维（维护）</th></tr></thead><tbody><tr><td>项目计划</td><td>《需求规格说明书》SRS</td><td>《概要设计》HLD~《详细设计》LLD</td><td></td><td>测试报告</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 最早提出的软件开发过程模型，有以下缺陷：    - 强调时间顺序严格执行；    - 测试在编码之后，没有体现出测试贯穿软件生命周期的原则；    - 各个阶段划分固定，阶段之间产生大量的文档，极大地增加了工作量；    - 线性开发，用户等到整个过程的末期才能见到开发成果，从而增加了开发风险；    - 瀑布模型不适应用户需求的变化- 优点：    - 为项目提供了按阶段划分的检查点；    - 当前一阶段完成后，只需要去关注后续阶段即可。</span><br></pre></td></tr></table></figure></li><li><p><strong>敏捷开发-Scrum</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 敏捷软件开发宣言：正式宣布了对四种核心价值和十二条原则，可以指导以人为中心的软件开发方法。    - 个体和互动、工作的软件、客户合作、响应变化高于流程和工具、详尽的文档、合同谈判、遵循计划。</span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/SoftwareTest/Download\Typora\image-20210708142054913.png" alt="image-20210708142054913"></p></li><li><p><strong>迭代模型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 定义：    迭代包括产生产品发布（稳定、可执行的产品版本）的全部开发活动和要使用该发布必须的所有其他元素，强调开发的深入。- 迭代：    在某种程度上，开发迭代是一次完整地经过所有工作流程的过程：需求分析、设计、实施和测试工作流程。    - 优点：    降低了在一个增量上的开支风险；        降低了产品无法按照既定进度进入市场的风险；        加快了整个开发工作的进度；            迭代过程这种模式使适应需求的变化会更容易些。</span><br></pre></td></tr></table></figure></li><li><p><strong>螺旋模型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 定义：    一种演化软件开发过程模型，兼顾了快速原型的迭代特征及瀑布模型的系统化与严格监控。    - 引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。    - 螺旋模型更适合大型昂贵的系统级的软件应用。</span><br></pre></td></tr></table></figure></li><li><p><strong>增量模型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 定义：把软件分割成独立的模块，分批次的完成和交付，依靠需求的变化而变化，各个独立模块之间没有强相关关系。 - 缺点：打破原有的软件结构和框架可能会带来一定的风险；- 增量模型一般会和迭代模型一起运用。     - 软件增加了新功能；    - 优化了部分功能；    - 修复了某些已知/未知的bug；    - </span><br></pre></td></tr></table></figure></li><li><p><strong>快速原型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 原型：可以模拟操作、简单运行的模型；- 典型应用和工具：    - Axure：制作原型；    - </span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/SoftwareTest/Download\Typora\image-20210708155908474.png" alt="image-20210708155908474"></p><p><a href="https://www.axure.com.cn/axure/course">基础教程 – Axure中文学习网</a></p><p><a href="https://www.bilibili.com/video/BV1qt411p739?from=search&seid=13899488701856984359">Visio2016完整版教程_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1Yx411f7d6?from=search&seid=2422061866436412340">Axure教程视频，0基础入门，2小时学会_哔哩哔哩_bilibili</a></p></li></ul><h2 id="三、测试过程模型和流程"><a href="#三、测试过程模型和流程" class="headerlink" title="三、测试过程模型和流程"></a>三、测试过程模型和流程</h2><h3 id="1、软件测试流程"><a href="#1、软件测试流程" class="headerlink" title="1、软件测试流程"></a>1、软件测试流程</h3><p><img src="/2021/08/12/SoftwareTest/Download\Typora\image-20210708155758238.png" alt="image-20210708155758238"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 软件测试过程是一种抽象的模型，用于定义软件测试的流程和方法。- 测试测试过程的质量将直接影响测试结果的准确性和有效性。遵循软件工程原理和管理学原理。</span><br></pre></td></tr></table></figure><h3 id="2、软件测试过程模型"><a href="#2、软件测试过程模型" class="headerlink" title="2、软件测试过程模型"></a>2、软件测试过程模型</h3><ul><li><p><strong>V</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 揭示了开发过程与测试过程中各个阶段的对应关系。-     </span><br></pre></td></tr></table></figure><p><img src="/2021/08/12/SoftwareTest/Download\Typora\image-20210708161042631.png" alt="image-20210708161042631"></p></li><li><p><strong>W</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p><strong>H</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 将测试活动完全独立出来，形成了一个完全独立的流程。软件测试是一个独立的流程！- 测试外包公司。     </span><br></pre></td></tr></table></figure></li><li><p><strong>X</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- X模型提出针对单独的程序片段进行相互分离的编码和测试，此后通过频繁的交接，通过集成最终合成为可执行的程序。- X模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。    </span><br></pre></td></tr></table></figure></li></ul><h3 id="3、软件测试过程理念"><a href="#3、软件测试过程理念" class="headerlink" title="3、软件测试过程理念"></a>3、软件测试过程理念</h3><ul><li><p>尽早测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 测试人员早期参与软件项目；- 尽早的开展测试执行工作。    </span><br></pre></td></tr></table></figure></li><li><p>全面测试 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 对软件的所有产品进行全面的测试；- 软件开发及测试人员（有时包括用户）全面的参与到测试工作中。    </span><br></pre></td></tr></table></figure></li><li><p>全过程测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 测试人员要充分关注开发过程；- 测试人员要对测试的全过程进行全程的跟踪。    </span><br></pre></td></tr></table></figure></li><li><p>独立的、迭代的测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 测试活动是独立的；- 测试活动应该是循环往复、不断的进行。    </span><br></pre></td></tr></table></figure></li><li><p>术语</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 内测： - 公测：测试服、公服   </span><br></pre></td></tr></table></figure></li></ul><h2 id="四、软件测试"><a href="#四、软件测试" class="headerlink" title="四、软件测试"></a>四、软件测试</h2><h3 id="1、软件测试分类"><a href="#1、软件测试分类" class="headerlink" title="1、软件测试分类"></a>1、软件测试分类</h3><ul><li><p><strong>按开发阶段划分</strong></p><table><thead><tr><th align="center"><strong>序号</strong></th><th align="center">阶段</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center"><strong>1</strong></td><td align="center">单元测试</td><td align="center">实现模块设计功能</td></tr><tr><td align="center"><strong>2</strong></td><td align="center">集成测试</td><td align="center">接口测试</td></tr><tr><td align="center"><strong>3</strong></td><td align="center">确认测试</td><td align="center">功能是否实现（冒烟测试）</td></tr><tr><td align="center"><strong>4</strong></td><td align="center">系统测试</td><td align="center">真实的环境下全方位软硬件测试</td></tr><tr><td align="center"><strong>5</strong></td><td align="center">验收测试</td><td align="center">α、β、γ测试</td></tr></tbody></table></li><li><p><strong>按代码运行划分</strong></p><table><thead><tr><th><strong>序号</strong></th><th><strong>阶段</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td>静态测试</td><td>不运行：代码、界面、文档测试</td></tr><tr><td><strong>2</strong></td><td>动态测试</td><td>运行被测对象</td></tr></tbody></table></li><li><p><strong>安软件特性去划分</strong></p><table><thead><tr><th><strong>序号</strong></th><th><strong>阶段</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td><strong>1</strong></td><td></td><td></td></tr><tr><td><strong>2</strong></td><td></td><td></td></tr></tbody></table></li></ul><p>P28</p><p><a href="https://www.bilibili.com/video/BV14v411B7p5?from=search&seid=16448192721436684746">软件测试开发技术视频教程（2021最新更新）助你月入20K！！！（新增游戏测试专题）_哔哩哔哩_bilibili</a></p><p><a href="https://www.woniuxy.com/major/6">在线课堂-专业-Java测试开发 (woniuxy.com)</a></p><p><a href="https://www.zhihu.com/question/407374630/answer/2007060270">软件测试大牛，有没有好的软件测试课程可以推荐下？ - 知乎 (zhihu.com)</a></p><h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><p><a href="https://blog.csdn.net/jihong10102006/article/details/80690557">(1条消息) 一、自动化测试基础_篱笆的专栏-CSDN博客_自动化测试</a></p><p><a href="https://www.zhihu.com/question/22211535">如何学习自动化测试？ - 知乎 (zhihu.com)</a></p><h3 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h3><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p><a href="https://www.jianshu.com/p/97ba64888894">Postman教程大全 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/fxbin123/article/details/80428216">(1条消息) Postman使用详解_大痴小乙的博客-CSDN博客_postman使用教程</a></p><h3 id="SoupUI"><a href="#SoupUI" class="headerlink" title="SoupUI"></a>SoupUI</h3><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h3><h1 id="软件测试简历"><a href="#软件测试简历" class="headerlink" title="软件测试简历"></a>软件测试简历</h1><ul><li><p>基本信息</p></li><li><p>教育背景</p></li><li><p>专业技能</p><p>1、熟练掌握软件测试基础理论、测试流程，软件测试的周期，测试架构。</p><p>2、熟练使用黑盒测试方法编写测试用例，能对WEB/APP/WAP进行全面有效的测试；</p><p>3、精通缺陷管理工具：Bugfree、禅道、Jira、QC</p><p>4、熟练掌握MySQL，能够进行有效的增/删/改/查以及高级查询等操作；</p><p>5、熟悉Linux基本命令，能够在Linux搭建下搭建测试环境；</p><p>6、熟悉Java语言，能编写简单的自动化脚本，能够看懂后台代码。</p><p>7、熟练掌握基础的网络HTTP/HTTPS协议TCP/IP和OSI协议。</p><p>8、熟悉自动化工具QTP和selenium自动化框架，能够完成有效的压力、负载、稳定性测试。</p><p>9、掌握LoadRunner及Jmeter性能测试工具，能够完成有效的压力、负载、稳定性测试。</p><p>10、掌握版本控制工具SVN/GIT。</p><p>11、熟悉前端基础知识，熟悉HTML标签及CSS属性。</p><p>12、掌握接口测试工具Postman、Swagger、Jmeter，掌握接口测试的理论及测试方法。</p><p>13、熟悉安全扫描工具APPscan。</p><p>14、熟悉自动化部署工具jenkins。</p><p>15、熟悉抓包工具fiddler，能够对抓取到的数据进行有效分析。</p><p>16、熟悉ADB命令，熟悉monkey移动端稳定性测试工具的使用。</p><p>17、熟练使用GT手机端性能测试工具对APP进行性能监控</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jmeter</title>
    <link href="http://example.com/2020/11/27/SoftWareTest-Jmeter/"/>
    <id>http://example.com/2020/11/27/SoftWareTest-Jmeter/</id>
    <published>2020-11-26T20:55:14.000Z</published>
    <updated>2021-08-17T01:20:52.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-环境搭建"><a href="#第一章-环境搭建" class="headerlink" title="第一章 环境搭建"></a>第一章 环境搭建</h1><h1 id="第二章-元件介绍"><a href="#第二章-元件介绍" class="headerlink" title="第二章 元件介绍"></a>第二章 元件介绍</h1><h2 id="一、操作对象分析"><a href="#一、操作对象分析" class="headerlink" title="一、操作对象分析"></a>一、操作对象分析</h2><h3 id="1、HTTP请求"><a href="#1、HTTP请求" class="headerlink" title="1、HTTP请求"></a>1、HTTP请求</h3><ul><li></li></ul><h1 id="第三章-实战操作"><a href="#第三章-实战操作" class="headerlink" title="第三章 实战操作"></a>第三章 实战操作</h1><h2 id="一、基础元件"><a href="#一、基础元件" class="headerlink" title="一、基础元件"></a>一、基础元件</h2><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210816211204285.png" alt="image-20210816211204285"></p><h2 id="三、Jmeter带token的实现"><a href="#三、Jmeter带token的实现" class="headerlink" title="三、Jmeter带token的实现"></a>三、Jmeter带token的实现</h2><ul><li><p><strong>access_token和refresh_token在登录token获取中的区别</strong></p></li><li><p><strong>BeanShell后置处理程序：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prev.setDataEncoding(&quot;UTF-8&quot;)</span><br></pre></td></tr></table></figure><p><strong>目的：</strong>解决响应体乱码问题。</p></li><li><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210817083222540.png" alt="image-20210817083222540"></p></li><li><p><strong>正则表达式提取器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用名称：     token</span><br><span class="line">正则表达式：   &quot;access_token&quot;:&quot;(.+?)&quot;</span><br><span class="line">模板： $1$</span><br><span class="line">匹配数字（0代表随机）：    0</span><br><span class="line">缺省值：                 null</span><br></pre></td></tr></table></figure><p><strong>目的：</strong>提取【登录】请求响应体中的access_token值，并赋予引用token。</p></li><li><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210817084415257.png" alt="image-20210817084415257"></p></li><li><p><strong>BeanShell取样器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;__setProperty(newtoken,<span class="variable">$&#123;token&#125;</span>,)&#125;</span></span><br></pre></td></tr></table></figure><p><strong>目的：</strong>将引用token的作用域设置为全局，确保其他请求可以使用之。</p><p><strong>注意：</strong>由于Jmeter默认一个线程组中的请求是由上至下依次执行，所以BeanShell取样器在线程组中的排列次序应在登录请求之后，其他请求之前，可确保数据取用无误。</p></li><li><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210817084606884.png" alt="image-20210817084606884"></p></li><li><p><strong>登录信息头管理器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization           Basic a3J0ZWNoOmtydGVjaA==</span><br></pre></td></tr></table></figure><p><strong>目的：</strong>登录请求的Authorization（授权）方式为基本认证(Basic Authentication)，不同于其他请求，所以需要单独在登录请求下设置一个信息头管理器，值为a3J0ZWNoOmtydGVjaA==。</p></li><li><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210817085136198.png" alt="image-20210817085136198"></p></li><li><p><strong>默认信息头管理器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization    Bearer $&#123;token&#125;</span><br></pre></td></tr></table></figure><p><strong>目的：</strong>其他请求默认的Authorization（授权）方式为Bearer token（Token令牌），由于已经将获取的access_token赋予引用token，故此时Authorization的值为<code>Bearer</code>+ <code> </code>+<code> $&#123;token&#125;</code>。注意其中的<code>空格</code>。</p></li><li><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210817085923215.png" alt="image-20210817085923215"></p></li><li><p><strong>查看结果树：</strong></p><p><strong>目的：</strong>查看access_token提取、作用域设置、引用、信息头管理器参数设置等一系列操作是否成功。</p><p><img src="/2020/11/27/SoftWareTest-Jmeter/Download\Typora\image-20210817091613006.png" alt="image-20210817091613006"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-环境搭建&quot;&gt;&lt;a href=&quot;#第一章-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;第一章 环境搭建&quot;&gt;&lt;/a&gt;第一章 环境搭建&lt;/h1&gt;&lt;h1 id=&quot;第二章-元件介绍&quot;&gt;&lt;a href=&quot;#第二章-元件介绍&quot; class=&quot;head</summary>
      
    
    
    
    <category term="软件编程" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="SoftwareTest,Jmeter" scheme="http://example.com/tags/SoftwareTest-Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Java笔记 | 第一篇 语言概述</title>
    <link href="http://example.com/2020/11/27/JavaNote-FirstPart/"/>
    <id>http://example.com/2020/11/27/JavaNote-FirstPart/</id>
    <published>2020-11-26T20:55:14.000Z</published>
    <updated>2021-08-07T15:53:07.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、语言概述"><a href="#一、语言概述" class="headerlink" title="一、语言概述"></a>一、语言概述</h1><h2 id="（一）计算机语言概述"><a href="#（一）计算机语言概述" class="headerlink" title="（一）计算机语言概述"></a>（一）计算机语言概述</h2><h3 id="1、计算机组成"><a href="#1、计算机组成" class="headerlink" title="1、计算机组成"></a>1、计算机组成</h3><ul><li><p>硬件：</p><p>CPU：中央处理器，负责运算。</p><p>内存：临时数据存储空间，断电数据消失。</p><p>硬盘：永久化存储设备。</p><p>主板：载体。</p><p>网卡：LAN 、WAN，负责通信。</p><p>电源：提供电能。</p><p>外接设备：鼠标、键盘、扫描仪、打印机等。</p></li><li><p>软件：</p><p>系统软件：Windows、Mac OS、Linux等。</p><p>应用软件：不同应用程序及客户端。</p></li><li><p>计算机语言：人与计算机之间传递信息的媒介。程序员通过编程语言编写程序（软件），驱动硬件进行数据操作以实现某些功能。</p></li></ul><h3 id="2、计算机语言"><a href="#2、计算机语言" class="headerlink" title="2、计算机语言"></a>2、计算机语言</h3><ul><li>是一个团队或者组织制定的一套固定的语法规则，通过学习这套语法规则，使用该套语法规则和计算机进行交互。</li></ul><h3 id="3、第一代语言——机器语言"><a href="#3、第一代语言——机器语言" class="headerlink" title="3、第一代语言——机器语言"></a>3、第一代语言——机器语言</h3><ul><li>程序员直接编写二进制码。计算机由电流驱动，电流只能表示正、负两种状态。二进制码和自然世界中的十进制存在转换关系。所以很巧妙的是:计算机可以模拟现实世界中的事物。</li><li>最具代表性的是：打孔机。</li></ul><h3 id="4、第二代语言——低级语言"><a href="#4、第二代语言——低级语言" class="headerlink" title="4、第二代语言——低级语言"></a>4、第二代语言——低级语言</h3><ul><li>最具代表性的语言：汇编语言。比机器语言更接近人类自然语言。</li></ul><h3 id="5、第三代语言——高级语言"><a href="#5、第三代语言——高级语言" class="headerlink" title="5、第三代语言——高级语言"></a>5、第三代语言——高级语言</h3><ul><li>C：面向过程。</li><li>C++：一半面向对象，一半面向过程。</li><li>Python：面向对象。</li><li>Java：完全面向对象。Java语言的底层是C++、可使用C++语言写一个虚拟电脑，即JVM。</li></ul><h2 id="（二）Java语言概述"><a href="#（二）Java语言概述" class="headerlink" title="（二）Java语言概述"></a>（二）Java语言概述</h2><h3 id="1、Java特性"><a href="#1、Java特性" class="headerlink" title="1、Java特性"></a>1、Java特性</h3><ul><li>面向对象：人类通常是以对象的方式认知世界的，面向对象更容易让人理解，采用面向对象的方式可以让复杂问题简单化。</li><li>可移植性：JVM跨平台，一处开发，到处执行。<strong>JVM屏蔽了操作系统之间的差异</strong>。</li><li>健壮性：”自动垃圾回收机制“中JVM负责调度GC（Garbage Collection）机制，无需程序员干涉，但是程序员也可以手动调度GC机制。</li><li>简单性：<strong>Java语言屏蔽了指针概念</strong>。</li><li>安全的：Java适合于网络/分布式环境，并且封装的概念将程序实现的细节都隐藏了起来，只对外暴露公共的访问方式。</li><li>多线程的：Java完美支持多线程并发，完美支持当下电商集中促销的商业模式。</li><li>分布式的：Java是为Internet的分布式环境设计的，因为它能够处理TCP/IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的，其支持远程方法调用(RMI,Remote Method Invocation)。</li></ul><h3 id="2、Java其他"><a href="#2、Java其他" class="headerlink" title="2、Java其他"></a>2、Java其他</h3><ul><li>项目部署的时候只需要给客户安装JRE即可，体积小，便捷快速。</li><li>Java编译：Java源代码不会影响字节码文件的运行，一个java源文件是可以生成多个class文件的。编译实质上是检查语法。</li><li>编译和执行可以在两套不同的操作系统上完成。</li><li>字节码文件可以反编译成为源代码，称之为反射机制。</li><li>classloader类加载器，加载（装载）A.class文件，其中A为类名。本质上是类加载器去硬盘上寻找类对应的字节码文件。</li><li>JVM启动解释器将字节码文件解释为二进制码，供OS和计算机硬件交互。</li><li>java新特性：java 后直接跟java源文件的路径，直接运行。但实际上底层的实现原理还是和以前一样，以上命令实现的过程中，还是会在内存中编译形成一个字节码文件。</li></ul><h2 id="（三）Java语言特性"><a href="#（三）Java语言特性" class="headerlink" title="（三）Java语言特性"></a>（三）Java语言特性</h2><h3 id="1、Java发展史"><a href="#1、Java发展史" class="headerlink" title="1、Java发展史"></a>1、Java发展史</h3><ul><li>1995年，Sun公司，James Gosling（java之父）。</li><li>2009年，Oracle收购。</li><li>Java语言的特性：面向对象的、分布式的、解释性的、多线程的、可移植的、健壮性、安全的、体系结构中立的、高性能的、动态的。</li><li>JavaSE（Java2 Platform,Standard Edition）Java平台标准版（基础语法+基础库）。</li><li>JavaEE（Java2 Platform,Enterprise Edition）Java平台企业版（OA、保险、金融）。</li><li>JavaME（Java2 Platform,Micro Edition）Java平台微型版（微型设备嵌入式开发）。</li></ul><h3 id="2、跨平台原理"><a href="#2、跨平台原理" class="headerlink" title="2、跨平台原理"></a>2、跨平台原理</h3><ul><li>Java程序并非是直接运行的。Java编译器将Java源程序编译成与平台无关的字节码文件（.class文件）。然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需要安装与该系统对应的Java虚拟机即可实现Java程序的跨平台运行。</li><li>Java语言当中真正操作内存的是JVM（Java虚拟机），所有的java程序都是运行在Java虚拟机当中的，而Java虚拟机执行过程中再去操作内存。</li></ul><h3 id="3、Java程序的开发流程"><a href="#3、Java程序的开发流程" class="headerlink" title="3、Java程序的开发流程"></a>3、Java程序的开发流程</h3><img src="/2020/11/27/JavaNote-FirstPart/GiteeBlog\blog\source\_posts\photoes\Java软件开发和执行流程.jpg" alt=" " style="zoom:23%;"><h3 id="4、JDK、JRE、JVM逻辑包含关系"><a href="#4、JDK、JRE、JVM逻辑包含关系" class="headerlink" title="4、JDK、JRE、JVM逻辑包含关系"></a>4、JDK、JRE、JVM逻辑包含关系</h3><ul><li><p>JDK（Java Development Kit）：称之为Java开发工具箱，包含了JRE和开发工具。</p></li><li><p>JRE（Java Runtime Environment）：称之为Java运行环境，包含了JVM和核心类库（ API）。</p></li><li><p>JVM（Java Virtual Machine）：称之为Java虚拟机。</p></li><li><p>JSR规范：Java Specification Request。</p></li><li><p>JCP组织：Java Community Process。</p></li><li><p>RI：Reference Implementation。</p></li><li><p>TCK：Technology Compatibility Kit。</p><img src="/2020/11/27/JavaNote-FirstPart/GiteeBlog\blog\source\_posts\photoes\JDK-JRE-JVM.jpg" alt="JDK-JRE-JVM" style="zoom: 50%;"></li></ul><h2 id="（四）Java开发环境搭建"><a href="#（四）Java开发环境搭建" class="headerlink" title="（四）Java开发环境搭建"></a>（四）Java开发环境搭建</h2><h3 id="1、JDK安装"><a href="#1、JDK安装" class="headerlink" title="1、JDK安装"></a>1、JDK安装</h3><ul><li><p>包含JRE、JVM的安装</p><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td>conf</td><td>该路径下存放了JDK的相关配置文件。</td></tr><tr><td>include</td><td>该路径下存放了一些平台特定的头文件。</td></tr><tr><td>jmods</td><td>该路径下存放了JDK的各种模块。</td></tr><tr><td>legal</td><td>该路径下存放了JDK各模块的授权文档。</td></tr><tr><td>lib</td><td>该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table></li></ul><h3 id="2、path环境变量配置"><a href="#2、path环境变量配置" class="headerlink" title="2、path环境变量配置"></a>2、path环境变量配置</h3><ul><li>引导Windows OS寻址命令文件。</li><li>Path本质上是隶属于Windows  OS的一种操作机制。</li></ul><h3 id="3、class-path环境变量配置"><a href="#3、class-path环境变量配置" class="headerlink" title="3、class path环境变量配置"></a>3、class path环境变量配置</h3><ul><li>引导classloader寻址字节码文件，但是因其改变了默认的寻址位置，固定于某一处，故暂时不需配置。</li><li>class path是Java特有的环境变量，需要在Windows中新建。</li></ul><h3 id="4、public-class与class的区别"><a href="#4、public-class与class的区别" class="headerlink" title="4、public class与class的区别"></a>4、public class与class的区别</h3><ul><li>一个java源文件中可定义多个class。</li><li>一个class会定义生成一个xxx.class字节码文件。</li><li>一个java源文件中public的class不是必须的。</li><li>一个java源文件中如果定义公开的类（public class），只能有一个，并且需要该类名称和java源文件名称一致。</li><li>每一个class中都需要写主方。</li><li>想从哪个入口进去，就加载哪一个类就行，但在开发中，一般只有一个入口。</li></ul><h3 id="5、JAVA-HOME"><a href="#5、JAVA-HOME" class="headerlink" title="5、JAVA_HOME"></a>5、JAVA_HOME</h3><ul><li>JAVA-WEB中的Tomcat服务器需要配置。</li></ul><h3 id="6、JAVA-HOME的bin目录"><a href="#6、JAVA-HOME的bin目录" class="headerlink" title="6、JAVA_HOME的bin目录"></a>6、JAVA_HOME的<code>bin</code>目录</h3><ul><li>java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码。</li><li>javac：这是Java的编译器，它用于把Java源码文件（以<code>.java</code>后缀结尾）编译为Java字节码文件（以<code>.class</code>后缀结尾）。</li><li>jar：用于把一组<code>.class</code>文件打包成一个<code>.jar</code>文件，便于发布。</li><li>javadoc：用于从Java源码中自动提取注释并生成文档。</li><li>jdb：Java调试器，用于开发阶段的运行调试。</li></ul><h2 id="（五）HelloWorld程序演示"><a href="#（五）HelloWorld程序演示" class="headerlink" title="（五）HelloWorld程序演示"></a>（五）HelloWorld程序演示</h2><h3 id="1、基础DOS命令"><a href="#1、基础DOS命令" class="headerlink" title="1、基础DOS命令"></a>1、基础DOS命令</h3><ul><li><p>Windows系统中复制：光标选中，右键单击即复制到剪切板，可直接粘贴。</p></li><li><p>在文件夹中‘.’表示当前目录。在文件中‘..’表示返回上一级文件目录。</p><table><thead><tr><th>DOS命令</th><th>作用</th></tr></thead><tbody><tr><td>Win + R</td><td>进入运行窗口</td></tr><tr><td>cmd</td><td>进入命令窗口(Command Prompt)</td></tr><tr><td>mkdir</td><td>创建一个目录（make directory）</td></tr><tr><td>dir</td><td>查看当前目录下的内容</td></tr><tr><td>d:   c: 等</td><td>盘符切换</td></tr><tr><td>cd 目录</td><td>改变一个目录（change directory）</td></tr><tr><td>cd..</td><td>返回上一级目录</td></tr><tr><td>cd 目录1\目录2</td><td>进入多级目录</td></tr><tr><td>cd\</td><td>退回到盘符更目录</td></tr><tr><td>cls</td><td>清屏(clear screen)</td></tr><tr><td>exit</td><td>退出命令窗口(exit)</td></tr><tr><td>del</td><td>删除命令(delete)</td></tr><tr><td>Tab</td><td>自动补全</td></tr><tr><td>ipconfig</td><td>查看本机IP地址</td></tr><tr><td>ping</td><td>通信正常测试</td></tr><tr><td>java -version</td><td>java程序的版本</td></tr></tbody></table></li></ul><h3 id="2、HelloWorld程序在DOS系统中的编译和执行"><a href="#2、HelloWorld程序在DOS系统中的编译和执行" class="headerlink" title="2、HelloWorld程序在DOS系统中的编译和执行"></a>2、HelloWorld程序在DOS系统中的编译和执行</h3><ul><li><pre><code class="java">public class HelloWorld &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;HelloWorld&quot;);    &#125;&#125;</code></pre></li><li><table><thead><tr><th>执行结果</th><th>DOS命令</th></tr></thead><tbody><tr><td>编译命令</td><td>Javac HelloWorld.java</td></tr><tr><td>运行命令</td><td>Java HelloWorld</td></tr></tbody></table></li></ul><h3 id="3、绝对路径和相对路径"><a href="#3、绝对路径和相对路径" class="headerlink" title="3、绝对路径和相对路径"></a>3、绝对路径和相对路径</h3><ul><li>绝对路径：在Windows操作系统中凡是路径起点是盘符的都是绝对路径。</li><li>相对路径：相对于当前位置而言，从当前作为位置的起点的路径，需有参照系 。</li></ul><h3 id="4、DOS命令窗口支持模糊搜索“-class”"><a href="#4、DOS命令窗口支持模糊搜索“-class”" class="headerlink" title="4、DOS命令窗口支持模糊搜索“*.class”"></a>4、DOS命令窗口支持模糊搜索“*.class”</h3><ul><li>文件名：T1.class、T1.glass。del  *ass这个命令可以直接删除上述两个文件。</li></ul><h3 id="5、DOS命令窗口查看本机的IP地址“ipconfig”"><a href="#5、DOS命令窗口查看本机的IP地址“ipconfig”" class="headerlink" title="5、DOS命令窗口查看本机的IP地址“ipconfig”"></a>5、DOS命令窗口查看本机的IP地址“ipconfig”</h3><ul><li>IP地址：计算机在同一个网络中的唯一识别码。</li><li>ipconfig(ipconfig/all能查看更全的本地信息，比如MAC地址)。</li><li>防蹭网：绑定MAC地址与路由器。</li></ul><h3 id="6、DOS命令窗口测试正常通信"><a href="#6、DOS命令窗口测试正常通信" class="headerlink" title="6、DOS命令窗口测试正常通信"></a>6、DOS命令窗口测试正常通信</h3><ul><li><p>ping命令：</p><p>ping 域名/IP地址</p><p>ping  <a href="http://www.baidu.com/">www.baidu.com</a></p><p>ping 61.135.169.121 -t（加‘-t’表示一直ping，Ctrl+C结束命令）</p></li><li><p>域名和/IP地址都可以打开网址，但最终域名底层还是会被解析成IP地址的形式（DNS和域名解析）。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、语言概述&quot;&gt;&lt;a href=&quot;#一、语言概述&quot; class=&quot;headerlink&quot; title=&quot;一、语言概述&quot;&gt;&lt;/a&gt;一、语言概述&lt;/h1&gt;&lt;h2 id=&quot;（一）计算机语言概述&quot;&gt;&lt;a href=&quot;#（一）计算机语言概述&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="软件编程" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
</feed>
