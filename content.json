{"meta":{"title":"TanDelai","subtitle":"","description":"","author":"TanDelai","url":"http://example.com","root":"/"},"pages":[{"title":"友情链接","date":"2021-08-11T15:34:13.212Z","updated":"2021-05-31T02:54:50.000Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-08-11T15:33:59.156Z","updated":"2021-08-11T14:41:08.057Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-08-11T15:34:32.860Z","updated":"2021-08-11T15:21:36.956Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-08-11T15:34:59.282Z","updated":"2021-08-11T15:21:22.735Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-08-11T15:33:44.107Z","updated":"2021-05-31T02:54:50.000Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-08-11T15:32:59.082Z","updated":"2021-08-11T15:32:59.082Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"}],"posts":[{"title":"","slug":"SoftwareTest","date":"2021-08-11T18:08:54.064Z","updated":"2021-08-16T12:55:57.419Z","comments":true,"path":"2021/08/12/SoftwareTest/","link":"","permalink":"http://example.com/2021/08/12/SoftwareTest/","excerpt":"","text":"1234567layout: pagestitle: 软件测试 | 第一篇 基础概念 date: 2021-08-12 02:11:14tags: - SoftwareTestcategories: - 软件编程 第一章 概述一、基础概念1、软件 定义：软件是相对硬件而言的，一系列按照特定顺序组织的计算机数据和指令的集合。 分类： 层级：系统软件（Windows、macOS、Linux、HarmonyOS、Android、iOS.etc）、应用软件（Client、APP、Plug-in）； 组织：商业软件、开源软件； 结构：单机软件、分布式软件； 2、生命周期 流程： 问题定义：软件提供方与需求方共同讨论，确定开发目标和可行性； 需求分析：划分软件需求的功能模块，编制成【需求文档】； 软件设计：对软件进行系统设计，如系统框架设计、数据库设计，编制【产品说明书】； 软件开发：制定统一、标准的程序编写规范，选择一种编程语言进行开发； 软件测试：查找软件设计与开发过程中存在的缺陷并加以修正； 软件运维：包括纠错性维护、改进性维护，持续时间最长。 3、开发模型 分类： 4、缺陷 定义：所有不满足或超出需求的部分都是缺陷（IEEE729-1983）。 分类： 内容：未实现产品说明书要求或虽未提及但应该实现的功能；实现了产品说明书中指明不应出现的或未做要求的功能；难以理解、不易使用的功能（用户角度），形成【缺陷报告】。 测试：界面、功能、性能、安全性、兼容性。 代码：bug、defect、error。 原因： 需求不明确；软件结构复杂；编码问题；项目周期太短；使用新技术。 处理流程： 管理工具： Bugzilla； 禅道； Jira。 5、测试 定义：为了检验软件是否满足需求或理清预期与实际之间的差异而用手工或自动手段运行或测定某个系统的过程。 分类： 测试阶段：单元测试、冒烟测试、集成测试、系统测试、验收测试； 测试技术：黑盒测试、白盒测试、灰盒测试； 质量特性：功能测试、性能测试（负载测试、压力测试.etc）； 自动化程度：手工测试、自动化测试； 测试类型：文档测试、界面测试、功能测试、性能测试、安全性测试、兼容性测试； 版本周期：Preview测试（预览版）、Alpha测试（内测版）、Beta测试（公测版）、Release测试(候选版)； 其他：静态测试、动态测试、随机测试、回归测试、探索性测试。 测试和调试 测试 调试 主体 测试 开发 方向 自底向上 自顶向下 目标 找bug 将错误修改正确 方法 等价类、边界值.etc 程序和逻辑算法 思路 反向思维、破坏性 正向思维 6、测试模型4、自动化测试 技术 1- 广度：JUnit接口测试、Web/APP/Client的UI测试、性能测试、用户体验测试、AI算法测试、LoT、压力测试、专项测试（兼容性、安全、多媒体、网络）...- 深度：Monkey、Appium、AirTest、Applitools。自动化测试远远不只是在一个已有的工具上开发自己的脚本，达到所谓的一个通过率或覆盖率，更核心是思考如何在软件生命周期各个阶段提升产品研发效能及稳定性甚至用户体验。 定位 1- 瀑布模型： - DevOps模型： 软件质量 二、生命周期和开发模型1、软件危机和软件工程 软件危机 1- 定义：软件生产方式无法满足迅速增长的需求从而导致软件开发维护过程中出现一系列严重问题的现象。 软件工程 1- 定义：基于软件危机，北约组织计算机科学家提出了软件工程，从此软件生产进入了工程化时代。- 软件开发技术：软件开发方法学、软件工具、软件工程环境。- 软件项目管理：软件质量、项目估算、进度控制、人员组织、配置管理、项目计划。- 引起软件危机的主要问题是软件质量问题。软件工程主要解决的就是软件质量问题。软件测试是软件质量管理体系中一个重要的手段。 2、软件生命周期3、软件开发模型 需求分析 概要设计 详细设计 编码 测试 验收 需求说明书 架构文档 详设文档 源代码 测试报告 产品 瀑布模型 计划（定义） 需求分析 设计 编码 测试 运维（维护） 项目计划 《需求规格说明书》SRS 《概要设计》HLD~《详细设计》LLD 测试报告 1- 最早提出的软件开发过程模型，有以下缺陷： - 强调时间顺序严格执行； - 测试在编码之后，没有体现出测试贯穿软件生命周期的原则； - 各个阶段划分固定，阶段之间产生大量的文档，极大地增加了工作量； - 线性开发，用户等到整个过程的末期才能见到开发成果，从而增加了开发风险； - 瀑布模型不适应用户需求的变化- 优点： - 为项目提供了按阶段划分的检查点； - 当前一阶段完成后，只需要去关注后续阶段即可。 敏捷开发-Scrum 1- 敏捷软件开发宣言：正式宣布了对四种核心价值和十二条原则，可以指导以人为中心的软件开发方法。 - 个体和互动、工作的软件、客户合作、响应变化高于流程和工具、详尽的文档、合同谈判、遵循计划。 迭代模型 1- 定义： 迭代包括产生产品发布（稳定、可执行的产品版本）的全部开发活动和要使用该发布必须的所有其他元素，强调开发的深入。- 迭代： 在某种程度上，开发迭代是一次完整地经过所有工作流程的过程：需求分析、设计、实施和测试工作流程。 - 优点： 降低了在一个增量上的开支风险； 降低了产品无法按照既定进度进入市场的风险； 加快了整个开发工作的进度； 迭代过程这种模式使适应需求的变化会更容易些。 螺旋模型 1- 定义： 一种演化软件开发过程模型，兼顾了快速原型的迭代特征及瀑布模型的系统化与严格监控。 - 引入了其他模型不具备的风险分析，使软件在无法排除重大风险时有机会停止，以减小损失。 - 螺旋模型更适合大型昂贵的系统级的软件应用。 增量模型 1- 定义：把软件分割成独立的模块，分批次的完成和交付，依靠需求的变化而变化，各个独立模块之间没有强相关关系。 - 缺点：打破原有的软件结构和框架可能会带来一定的风险；- 增量模型一般会和迭代模型一起运用。 - 软件增加了新功能； - 优化了部分功能； - 修复了某些已知/未知的bug； - 快速原型 1- 原型：可以模拟操作、简单运行的模型；- 典型应用和工具： - Axure：制作原型； - 基础教程 – Axure中文学习网 Visio2016完整版教程_哔哩哔哩_bilibili Axure教程视频，0基础入门，2小时学会_哔哩哔哩_bilibili 三、测试过程模型和流程1、软件测试流程 1- 软件测试过程是一种抽象的模型，用于定义软件测试的流程和方法。- 测试测试过程的质量将直接影响测试结果的准确性和有效性。遵循软件工程原理和管理学原理。 2、软件测试过程模型 V 1- 揭示了开发过程与测试过程中各个阶段的对应关系。- W 1 H 1- 将测试活动完全独立出来，形成了一个完全独立的流程。软件测试是一个独立的流程！- 测试外包公司。 X 1- X模型提出针对单独的程序片段进行相互分离的编码和测试，此后通过频繁的交接，通过集成最终合成为可执行的程序。- X模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。 3、软件测试过程理念 尽早测试 1- 测试人员早期参与软件项目；- 尽早的开展测试执行工作。 全面测试 1- 对软件的所有产品进行全面的测试；- 软件开发及测试人员（有时包括用户）全面的参与到测试工作中。 全过程测试 1- 测试人员要充分关注开发过程；- 测试人员要对测试的全过程进行全程的跟踪。 独立的、迭代的测试 1- 测试活动是独立的；- 测试活动应该是循环往复、不断的进行。 术语 1- 内测： - 公测：测试服、公服 四、软件测试1、软件测试分类 按开发阶段划分 序号 阶段 简介 1 单元测试 实现模块设计功能 2 集成测试 接口测试 3 确认测试 功能是否实现（冒烟测试） 4 系统测试 真实的环境下全方位软硬件测试 5 验收测试 α、β、γ测试 按代码运行划分 序号 阶段 简介 1 静态测试 不运行：代码、界面、文档测试 2 动态测试 运行被测对象 安软件特性去划分 序号 阶段 简介 1 2 P28 软件测试开发技术视频教程（2021最新更新）助你月入20K！！！（新增游戏测试专题）_哔哩哔哩_bilibili 在线课堂-专业-Java测试开发 (woniuxy.com) 软件测试大牛，有没有好的软件测试课程可以推荐下？ - 知乎 (zhihu.com) 自动化测试(1条消息) 一、自动化测试基础_篱笆的专栏-CSDN博客_自动化测试 如何学习自动化测试？ - 知乎 (zhihu.com) JmeterPostmanPostman教程大全 - 简书 (jianshu.com) (1条消息) Postman使用详解_大痴小乙的博客-CSDN博客_postman使用教程 SoupUISelenium软件测试简历 基本信息 教育背景 专业技能 1、熟练掌握软件测试基础理论、测试流程，软件测试的周期，测试架构。 2、熟练使用黑盒测试方法编写测试用例，能对WEB/APP/WAP进行全面有效的测试； 3、精通缺陷管理工具：Bugfree、禅道、Jira、QC 4、熟练掌握MySQL，能够进行有效的增/删/改/查以及高级查询等操作； 5、熟悉Linux基本命令，能够在Linux搭建下搭建测试环境； 6、熟悉Java语言，能编写简单的自动化脚本，能够看懂后台代码。 7、熟练掌握基础的网络HTTP/HTTPS协议TCP/IP和OSI协议。 8、熟悉自动化工具QTP和selenium自动化框架，能够完成有效的压力、负载、稳定性测试。 9、掌握LoadRunner及Jmeter性能测试工具，能够完成有效的压力、负载、稳定性测试。 10、掌握版本控制工具SVN/GIT。 11、熟悉前端基础知识，熟悉HTML标签及CSS属性。 12、掌握接口测试工具Postman、Swagger、Jmeter，掌握接口测试的理论及测试方法。 13、熟悉安全扫描工具APPscan。 14、熟悉自动化部署工具jenkins。 15、熟悉抓包工具fiddler，能够对抓取到的数据进行有效分析。 16、熟悉ADB命令，熟悉monkey移动端稳定性测试工具的使用。 17、熟练使用GT手机端性能测试工具对APP进行性能监控","categories":[],"tags":[]},{"title":"Jmeter","slug":"SoftWareTest-Jmeter","date":"2020-11-26T20:55:14.000Z","updated":"2021-08-17T01:20:52.523Z","comments":true,"path":"2020/11/27/SoftWareTest-Jmeter/","link":"","permalink":"http://example.com/2020/11/27/SoftWareTest-Jmeter/","excerpt":"","text":"第一章 环境搭建第二章 元件介绍一、操作对象分析1、HTTP请求 第三章 实战操作一、基础元件 三、Jmeter带token的实现 access_token和refresh_token在登录token获取中的区别 BeanShell后置处理程序： 1prev.setDataEncoding(&quot;UTF-8&quot;) 目的：解决响应体乱码问题。 正则表达式提取器： 12345引用名称： token正则表达式： &quot;access_token&quot;:&quot;(.+?)&quot;模板： $1$匹配数字（0代表随机）： 0缺省值： null 目的：提取【登录】请求响应体中的access_token值，并赋予引用token。 BeanShell取样器： 1$&#123;__setProperty(newtoken,$&#123;token&#125;,)&#125; 目的：将引用token的作用域设置为全局，确保其他请求可以使用之。 注意：由于Jmeter默认一个线程组中的请求是由上至下依次执行，所以BeanShell取样器在线程组中的排列次序应在登录请求之后，其他请求之前，可确保数据取用无误。 登录信息头管理器： 1Authorization Basic a3J0ZWNoOmtydGVjaA== 目的：登录请求的Authorization（授权）方式为基本认证(Basic Authentication)，不同于其他请求，所以需要单独在登录请求下设置一个信息头管理器，值为a3J0ZWNoOmtydGVjaA==。 默认信息头管理器： 1Authorization Bearer $&#123;token&#125; 目的：其他请求默认的Authorization（授权）方式为Bearer token（Token令牌），由于已经将获取的access_token赋予引用token，故此时Authorization的值为Bearer+ + $&#123;token&#125;。注意其中的空格。 查看结果树： 目的：查看access_token提取、作用域设置、引用、信息头管理器参数设置等一系列操作是否成功。","categories":[{"name":"软件编程","slug":"软件编程","permalink":"http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"SoftwareTest,Jmeter","slug":"SoftwareTest-Jmeter","permalink":"http://example.com/tags/SoftwareTest-Jmeter/"}]},{"title":"Java笔记 | 第一篇 语言概述","slug":"JavaNote-FirstPart","date":"2020-11-26T20:55:14.000Z","updated":"2021-08-07T15:53:07.548Z","comments":true,"path":"2020/11/27/JavaNote-FirstPart/","link":"","permalink":"http://example.com/2020/11/27/JavaNote-FirstPart/","excerpt":"","text":"一、语言概述（一）计算机语言概述1、计算机组成 硬件： CPU：中央处理器，负责运算。 内存：临时数据存储空间，断电数据消失。 硬盘：永久化存储设备。 主板：载体。 网卡：LAN 、WAN，负责通信。 电源：提供电能。 外接设备：鼠标、键盘、扫描仪、打印机等。 软件： 系统软件：Windows、Mac OS、Linux等。 应用软件：不同应用程序及客户端。 计算机语言：人与计算机之间传递信息的媒介。程序员通过编程语言编写程序（软件），驱动硬件进行数据操作以实现某些功能。 2、计算机语言 是一个团队或者组织制定的一套固定的语法规则，通过学习这套语法规则，使用该套语法规则和计算机进行交互。 3、第一代语言——机器语言 程序员直接编写二进制码。计算机由电流驱动，电流只能表示正、负两种状态。二进制码和自然世界中的十进制存在转换关系。所以很巧妙的是:计算机可以模拟现实世界中的事物。 最具代表性的是：打孔机。 4、第二代语言——低级语言 最具代表性的语言：汇编语言。比机器语言更接近人类自然语言。 5、第三代语言——高级语言 C：面向过程。 C++：一半面向对象，一半面向过程。 Python：面向对象。 Java：完全面向对象。Java语言的底层是C++、可使用C++语言写一个虚拟电脑，即JVM。 （二）Java语言概述1、Java特性 面向对象：人类通常是以对象的方式认知世界的，面向对象更容易让人理解，采用面向对象的方式可以让复杂问题简单化。 可移植性：JVM跨平台，一处开发，到处执行。JVM屏蔽了操作系统之间的差异。 健壮性：”自动垃圾回收机制“中JVM负责调度GC（Garbage Collection）机制，无需程序员干涉，但是程序员也可以手动调度GC机制。 简单性：Java语言屏蔽了指针概念。 安全的：Java适合于网络/分布式环境，并且封装的概念将程序实现的细节都隐藏了起来，只对外暴露公共的访问方式。 多线程的：Java完美支持多线程并发，完美支持当下电商集中促销的商业模式。 分布式的：Java是为Internet的分布式环境设计的，因为它能够处理TCP/IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的，其支持远程方法调用(RMI,Remote Method Invocation)。 2、Java其他 项目部署的时候只需要给客户安装JRE即可，体积小，便捷快速。 Java编译：Java源代码不会影响字节码文件的运行，一个java源文件是可以生成多个class文件的。编译实质上是检查语法。 编译和执行可以在两套不同的操作系统上完成。 字节码文件可以反编译成为源代码，称之为反射机制。 classloader类加载器，加载（装载）A.class文件，其中A为类名。本质上是类加载器去硬盘上寻找类对应的字节码文件。 JVM启动解释器将字节码文件解释为二进制码，供OS和计算机硬件交互。 java新特性：java 后直接跟java源文件的路径，直接运行。但实际上底层的实现原理还是和以前一样，以上命令实现的过程中，还是会在内存中编译形成一个字节码文件。 （三）Java语言特性1、Java发展史 1995年，Sun公司，James Gosling（java之父）。 2009年，Oracle收购。 Java语言的特性：面向对象的、分布式的、解释性的、多线程的、可移植的、健壮性、安全的、体系结构中立的、高性能的、动态的。 JavaSE（Java2 Platform,Standard Edition）Java平台标准版（基础语法+基础库）。 JavaEE（Java2 Platform,Enterprise Edition）Java平台企业版（OA、保险、金融）。 JavaME（Java2 Platform,Micro Edition）Java平台微型版（微型设备嵌入式开发）。 2、跨平台原理 Java程序并非是直接运行的。Java编译器将Java源程序编译成与平台无关的字节码文件（.class文件）。然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需要安装与该系统对应的Java虚拟机即可实现Java程序的跨平台运行。 Java语言当中真正操作内存的是JVM（Java虚拟机），所有的java程序都是运行在Java虚拟机当中的，而Java虚拟机执行过程中再去操作内存。 3、Java程序的开发流程 4、JDK、JRE、JVM逻辑包含关系 JDK（Java Development Kit）：称之为Java开发工具箱，包含了JRE和开发工具。 JRE（Java Runtime Environment）：称之为Java运行环境，包含了JVM和核心类库（ API）。 JVM（Java Virtual Machine）：称之为Java虚拟机。 JSR规范：Java Specification Request。 JCP组织：Java Community Process。 RI：Reference Implementation。 TCK：Technology Compatibility Kit。 （四）Java开发环境搭建1、JDK安装 包含JRE、JVM的安装 目录名称 说明 bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。 conf 该路径下存放了JDK的相关配置文件。 include 该路径下存放了一些平台特定的头文件。 jmods 该路径下存放了JDK的各种模块。 legal 该路径下存放了JDK各模块的授权文档。 lib 该路径下存放了JDK工具的一些补充JAR包。 2、path环境变量配置 引导Windows OS寻址命令文件。 Path本质上是隶属于Windows OS的一种操作机制。 3、class path环境变量配置 引导classloader寻址字节码文件，但是因其改变了默认的寻址位置，固定于某一处，故暂时不需配置。 class path是Java特有的环境变量，需要在Windows中新建。 4、public class与class的区别 一个java源文件中可定义多个class。 一个class会定义生成一个xxx.class字节码文件。 一个java源文件中public的class不是必须的。 一个java源文件中如果定义公开的类（public class），只能有一个，并且需要该类名称和java源文件名称一致。 每一个class中都需要写主方。 想从哪个入口进去，就加载哪一个类就行，但在开发中，一般只有一个入口。 5、JAVA_HOME JAVA-WEB中的Tomcat服务器需要配置。 6、JAVA_HOME的bin目录 java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码。 javac：这是Java的编译器，它用于把Java源码文件（以.java后缀结尾）编译为Java字节码文件（以.class后缀结尾）。 jar：用于把一组.class文件打包成一个.jar文件，便于发布。 javadoc：用于从Java源码中自动提取注释并生成文档。 jdb：Java调试器，用于开发阶段的运行调试。 （五）HelloWorld程序演示1、基础DOS命令 Windows系统中复制：光标选中，右键单击即复制到剪切板，可直接粘贴。 在文件夹中‘.’表示当前目录。在文件中‘..’表示返回上一级文件目录。 DOS命令 作用 Win + R 进入运行窗口 cmd 进入命令窗口(Command Prompt) mkdir 创建一个目录（make directory） dir 查看当前目录下的内容 d: c: 等 盘符切换 cd 目录 改变一个目录（change directory） cd.. 返回上一级目录 cd 目录1\\目录2 进入多级目录 cd\\ 退回到盘符更目录 cls 清屏(clear screen) exit 退出命令窗口(exit) del 删除命令(delete) Tab 自动补全 ipconfig 查看本机IP地址 ping 通信正常测试 java -version java程序的版本 2、HelloWorld程序在DOS系统中的编译和执行 public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(&quot;HelloWorld&quot;); &#125; &#125; 执行结果 DOS命令 编译命令 Javac HelloWorld.java 运行命令 Java HelloWorld 3、绝对路径和相对路径 绝对路径：在Windows操作系统中凡是路径起点是盘符的都是绝对路径。 相对路径：相对于当前位置而言，从当前作为位置的起点的路径，需有参照系 。 4、DOS命令窗口支持模糊搜索“*.class” 文件名：T1.class、T1.glass。del *ass这个命令可以直接删除上述两个文件。 5、DOS命令窗口查看本机的IP地址“ipconfig” IP地址：计算机在同一个网络中的唯一识别码。 ipconfig(ipconfig/all能查看更全的本地信息，比如MAC地址)。 防蹭网：绑定MAC地址与路由器。 6、DOS命令窗口测试正常通信 ping命令： ping 域名/IP地址 ping www.baidu.com ping 61.135.169.121 -t（加‘-t’表示一直ping，Ctrl+C结束命令） 域名和/IP地址都可以打开网址，但最终域名底层还是会被解析成IP地址的形式（DNS和域名解析）。","categories":[{"name":"软件编程","slug":"软件编程","permalink":"http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}],"categories":[{"name":"软件编程","slug":"软件编程","permalink":"http://example.com/categories/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"SoftwareTest,Jmeter","slug":"SoftwareTest-Jmeter","permalink":"http://example.com/tags/SoftwareTest-Jmeter/"},{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]}